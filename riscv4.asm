# Let l be a linked list of integers in the data segment and x an integer such that (0 <= x):
# Write a RISC-V program, both data and text segments, that computes the sum of the integers in the list
# skipping the first x elements.
# Let l = [4, -2, 3, 4, 4, 3, 1], x = 5. The number to print is 4.


.data
x: .word 5                      # Инициализация переменной x значением 5
list: .word n01                 # Сохранение адреса первого элемента списка в переменной list
n01: .word 4, n02               # Определение элементов списка, каждый из которых содержит значение и ссылку на следующий
n02: .word -2, n03
n03: .word 3, n04
n04: .word 4, n05
n05: .word 4, n06
n06: .word 3, n07
n07: .word 1, 0                 # Последний элемент списка с указателем на 0 (конец списка)

.text
    lw a1, x                    # Загрузка значения x в регистр a1
    lw a0, list                 # Загрузка адреса начала списка в регистр a0
    slli t0, a1, 3              # Умножение значения x на 8 (сдвиг влево на 3 бита) для получения смещения в байтах
    add a0, a0, t0              # Прибавление смещения к адресу начала списка, чтобы получить адрес x-го элемента
    jal ra, skipXSum            # Переход к функции skipXSum для начала суммирования
    addi a7, zero, 1            # Установка системного вызова для печати
    ecall                       # Выполнение системного вызова для печати значения в a0
    addi a7, zero, 10           # Установка системного вызова для завершения программы
    ecall                       # Выполнение системного вызова для завершения программы

skipXSum:
    bne a0, zero, recSkipSum    # Если a0 не равен нулю (не достигнут конец списка), переход к recSkipSum
    jalr zero, ra, 0            # Возврат из функции, если достигнут конец списка
recSkipSum:
    lw t0, 0(a0)                # Загрузка текущего значения элемента списка в t0
    addi sp, sp, -8             # Выделение места в стеке для сохранения ra и t0
    sw ra, 0(sp)                # Сохранение значения ra в стек
    sw t0, 4(sp)                # Сохранение текущего значения элемента списка в стек
    lw a0, 4(a0)                # Загрузка адреса следующего элемента списка в a0
    jal ra, skipXSum            # Рекурсивный вызов функции skipXSum
    lw t0, 4(sp)                # Загрузка сохраненного значения элемента списка из стека
    add a0, a0, t0              # Прибавление загруженного значения к сумме
    lw ra, 0(sp)                # Восстановление значения ra из стека
    addi sp, sp, 8              # Освобождение места в стеке
    jalr zero, ra, 0            # Возврат из функции
